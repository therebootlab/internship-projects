<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Backend Engineer Internship - The Reboot Lab</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            background-color: #f4f4f4;
            margin: 0;
            padding: 20px;
        }
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
            max-width: 900px;
            margin: auto;
        }
        h1 {
            color: #333;
        }
        p {
            color: #555;
        }
        pre {
            background-color: #f8f8f8;
            padding: 10px;
            border: 1px solid #ddd;
            overflow-x: auto;
        }
        .instructions {
            background-color: #e7f3ff;
            padding: 15px;
            border-left: 4px solid #2196f3;
            margin-bottom: 20px;
        }
        .bonus {
            background-color: #f9fbe7;
            padding: 10px;
            border-left: 4px solid #cddc39;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            font-size: 0.9em;
            color: #888;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Backend Engineer (Internship)</h1>
        <p><strong>Position:</strong> Backend Engineer Intern</p>
        <p><strong>Company:</strong> The Reboot Lab</p>
        <p><strong>Location:</strong> Remote</p>
        <p><strong>Duration:</strong> 6-12 months</p>
        <p><strong>Type:</strong> Paid Internship</p>

        <h2>About Us</h2>
        <p>We are working on an AI-powered aggregator platform providing eKYC solutions to clients such as investment and crypto platforms. Our services focus on delivering cutting-edge solutions by integrating backend services based on request requirements, service health, and other critical factors.</p>

        <h2>Internship Overview</h2>
        <p>We are seeking a motivated Backend Engineer Intern who is passionate about building production-grade applications. As part of the internship, you will be tasked with developing a backend system similar to <strong>Stack Overflow</strong> using <strong>Spring Boot</strong>.</p>

        <h2>Project Details</h2>
        <p>In this project, you will build a backend for a Stack Overflow-like application. The goal is to create a Spring Boot application with the following key features:</p>

        <ul>
            <li>Create a new question (POST endpoint)</li>
            <li>Fetch all questions (GET endpoint)</li>
            <li>Fetch a question by query (GET endpoint with filters)</li>
            <li>Upvote or downvote a question (PUT endpoint)</li>
            <li>Reply to a question (POST endpoint)</li>
        </ul>

        <div class="bonus">
            <strong>Bonus Marks:</strong> Implement JWT-based login and authentication to secure the application.
        </div>

        <h2>API Endpoint Details</h2>
        <p>Below are the details for the required API endpoints, along with sample requests and responses:</p>

        <h3>1. Create a New Question</h3>
        <p><strong>Endpoint:</strong> <code>POST /api/questions</code></p>
        <p><strong>Request Body:</strong></p>
        <pre>{
    "title": "How to implement JWT in Spring Boot?",
    "description": "I'm trying to implement JWT for authentication in my Spring Boot application. Can anyone guide me?",
    "tags": ["spring-boot", "jwt", "authentication"]
}</pre>
        <p><strong>Sample Response:</strong></p>
        <pre>{
    "id": 1,
    "title": "How to implement JWT in Spring Boot?",
    "description": "I'm trying to implement JWT for authentication in my Spring Boot application. Can anyone guide me?",
    "tags": ["spring-boot", "jwt", "authentication"],
    "upvotes": 0,
    "downvotes": 0,
    "replies": []
}</pre>

        <h3>2. Get All Questions</h3>
        <p><strong>Endpoint:</strong> <code>GET /api/questions</code></p>
        <p><strong>Sample Response:</strong></p>
        <pre>[
    {
        "id": 1,
        "title": "How to implement JWT in Spring Boot?",
        "tags": ["spring-boot", "jwt"]
    },
    {
        "id": 2,
        "title": "What is Dependency Injection?",
        "tags": ["java", "spring"]
    }
]</pre>

        <h3>3. Get Questions by Query</h3>
        <p><strong>Endpoint:</strong> <code>GET /api/questions?search=jwt</code></p>
        <p><strong>Sample Response:</strong></p>
        <pre>[
    {
        "id": 1,
        "title": "How to implement JWT in Spring Boot?",
        "tags": ["spring-boot", "jwt"]
    }
]</pre>

        <h3>4. Upvote/Downvote a Question</h3>
        <p><strong>Endpoint:</strong> <code>PUT /api/questions/{id}/upvote</code></p>
        <p><strong>Sample Request:</strong></p>
        <pre>PUT /api/questions/1/upvote</pre>
        <p><strong>Sample Response:</strong></p>
        <pre>{
    "id": 1,
    "upvotes": 1,
    "downvotes": 0
}</pre>

        <p><strong>Endpoint:</strong> <code>PUT /api/questions/{id}/downvote</code></p>
        <p><strong>Sample Request:</strong></p>
        <pre>PUT /api/questions/1/downvote</pre>
        <p><strong>Sample Response:</strong></p>
        <pre>{
    "id": 1,
    "upvotes": 0,
    "downvotes": 1
}</pre>

        <h3>5. Reply to a Question</h3>
        <p><strong>Endpoint:</strong> <code>POST /api/questions/{id}/reply</code></p>
        <p><strong>Request Body:</strong></p>
        <pre>{
    "reply": "You can use the Spring Security library to integrate JWT into your Spring Boot app."
}</pre>
        <p><strong>Sample Response:</strong></p>
        <pre>{
    "id": 1,
    "replies": [
        {
            "replyId": 1,
            "reply": "You can use the Spring Security library to integrate JWT into your Spring Boot app."
        }
    ]
}</pre>

        <h2>Assignment Instructions</h2>
        <div class="instructions">
            <h3>Production-Ready Requirements</h3>
            <ul>
                <li><strong>Use Spring Boot:</strong> Ensure all endpoints are developed using Spring Boot framework.</li>
                <li><strong>Database Integration:</strong> Use a relational database (e.g., MySQL, PostgreSQL) to store and manage data. Apply appropriate database normalization and indexing for efficient queries.</li>
                <li><strong>Security:</strong> Implement JWT-based authentication to protect the application. Only authenticated users should be able to post, upvote, downvote, and reply to questions.</li>
                <li><strong>RESTful API:</strong> Adhere to RESTful API design principles with clear separation of concerns between the client and server.</li>
                <li><strong>Documentation:</strong> Provide detailed API documentation using Swagger or any other API documentation tool.</li>
                <li><strong>Error Handling:</strong> Implement proper error handling and return meaningful HTTP status codes (e.g., 404 for not found, 400 for bad requests).</li>
                <li><strong>Logging:</strong> Use a logging framework (e.g., Logback, SLF4J) for logging requests, errors, and other key activities.</li>
                <li><strong>Docker:</strong> Containerize the application using Docker to ensure portability and ease of deployment.</li>
                <li><strong>Testing:</strong> Write unit and integration tests for the key components of the application.</li>
                <li><strong>Deployment:</strong> Prepare the application to be production-ready by providing scripts or documentation for deploying to a cloud service (e.g., AWS, GCP, or Azure).</li>
            </ul>
        </div>

        <h2>Submission Requirements</h2>
        <p>Submit your project on GitHub with proper README documentation explaining the setup, structure, and key features of the application. Ensure that the repository is public, and share the link with us.</p>

        <div class="
